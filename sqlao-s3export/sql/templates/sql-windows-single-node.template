{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "This template deploys a single node SQL Server. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Network Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"PrivateSubnetAssignment",
						"ADServersPrivateIP"
					]
				},
				{
					"Label": {
						"default": "Amazon EC2 Configuration"
					},
					"Parameters": [
						"KeyPairName",
						"UniqueID"
					]
				},
				{
					"Label": {
						"default": "Microsoft Active Directory Configuration"
					},
					"Parameters": [
						"CreateNewAD",
						"DomainDNSName",
						"DomainAdminUser",
						"DomainAdminPasswordKey",
						"DomainMemberSGID"
					]
				},
				{
					"Label": {
						"default": "Microsoft SQL Server Configuration"
					},
					"Parameters": [
						"SQLAMIID",
						"SQLServerVersion",
						"SQLServiceAccount",
						"SQLServiceAccountPasswordKey",
						"SQLLicenseProvided",
						"Volume1Size",
						"Volume1Type",
						"Volume1DeviceName",
						"Volume1DriveLetter",
						"Volume1DriveType",
						"Volume2Size",
						"Volume2Type",
						"Volume2DeviceName",
						"Volume2DriveLetter",
						"Volume2DriveType",
						"Volume3Size",
						"Volume3Type",
						"Volume3DeviceName",
						"Volume3DriveLetter",
						"Volume3DriveType",
						"VolumeIopsValues",
						"RootDriveSize",
						"RootDriveType",
						"SQLNodeTagPairs",
						"NumberOfSQLNodeTags",
						"VolumeTagPairs",
						"NumberOfVolumeTags",
						"VersionsRange",
						"TempDBonInstanceStore"
					]
				},
				{
					"Label": {
						"default": "AWS Launch Wizard Configuration"
					},
					"Parameters": [
						"AssetsBucketName",
						"AssetsS3KeyPrefix"
					]
				}
			]
		}
	},
	"Parameters": {
		"Ec2RoleName": {
			"Default": "",
			"Description": "Role name for EC2 instance profile",
			"Type": "String"
		},
		"UniqueID": {
			"Default": "UID123",
			"Description": "Automation Execution Unique Id.",
			"Type": "String"
		},
		"VPCCIDR": {
			"Default": "",
			"Description": "The VPC CIDR.",
			"Type": "String"
		},
		"LaunchWizardModuleName": {
			"Default": "LaunchWizard",
			"Description": "Name of module that holds all LaunchWizard DSC resources (must be same as in all scripts)",
			"Type": "String"
		},
		"SQLHAPreConfigModuleName": {
			"Default": "SQLHA",
			"Description": "Name of module that holds all SQLHA DSC resources applied preconfig (must be same as in all scripts)",
			"Type": "String"
		},
		"SQLHAPostConfigModuleName": {
			"Default": "SQLAddAdmins",
			"Description": "Name of module that holds all DSC resources applied postconfig(must be same as in all scripts)",
			"Type": "String"
		},
		"LogGroupName": {
			"Default": "",
			"Description": "Log Group Name.",
			"Type": "String"
		},
		"EnableLogFeature": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "If Log Feature has been required",
			"Type": "String"
		},
		"CreateNewAD": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Have a AD in your VPC already",
			"Type": "String"
		},
		"AvailabilityZone": {
			"Description": "Availability Zone to use for the subnet in the VPC.",
			"Type": "String"
		},
		"DomainAdminPasswordKey": {
			"Description": "SSM Parameter Key of Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
			"Type": "String"
		},
		"DomainAdminUser": {
			"AllowedPattern": "([a-zA-Z0-9]+(\\.|_|-|@)*)+",
			"Default": "StackAdmin",
			"Description": "User name for the account that will be used as Domain Administrator. This is separate from the default \"Administrator\" account",
			"MaxLength": "20",
			"MinLength": "5",
			"Type": "String"
		},
		"DomainDNSName": {
			"AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
			"Default": "example.com",
			"Description": "Fully qualified domain name (FQDN) e.g. example.com",
			"MaxLength": "255",
			"MinLength": "2",
			"Type": "String"
		},
		"DomainMemberSGID": {
			"Description": "ID of the Domain Member Security Group (e.g., sg-7f16e910)",
			"Type": "AWS::EC2::SecurityGroup::Id"
		},
		"ADServersPrivateIP": {
			"Default": "",
			"Description": "Fixed private IPs for Active Directory servers",
			"Type": "String"
		},
		"KeyPairName": {
			"Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"PrivateSubnetAssignment": {
			"Default": "",
			"Description": "Private subnet assignment for sql node",
			"Type": "String"
		},
		"AssetsBucketName": {
			"Default": "launchwizard-sqlha-templates",
			"Description": "S3 bucket name for the LaunchWizard SQLHA assets. LaunchWizard SQLHA bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
			"Type": "String"
		},
		"AssetsS3KeyPrefix": {
			"Default": "",
			"Description": "S3 key prefix for the LaunchWizard SQLHA assets. LaunchWizard SQLHA key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
			"Type": "String"
		},
		"AssetsS3RegionCode": {
			"Default": "s3.us-east-1",
			"Description": "S3 region code.",
			"Type": "String"
		},
		"SQLAMIID": {
			"Default": "ami-066110f78aa038545",
			"Description": "AMI ID",
			"Type": "String"
		},
		"SQLLicenseProvided": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "License SQL Server from AWS Marketplace",
			"Type": "String"
		},
		"SQLServerVersion": {
			"AllowedValues": [
				"2017-standard",
				"2017",
				"2016",
				"2014"
			],
			"Default": "2017",
			"Description": "Version of SQL Server to install on Failover Cluster Nodes",
			"Type": "String"
		},
		"SQLServiceAccount": {
			"AllowedPattern": "([a-zA-Z0-9]+(\\.|_|-|@)*)+",
			"Default": "sqlsa",
			"Description": "User name for the SQL Server Service Account. This Account is a Domain User.",
			"MaxLength": "20",
			"MinLength": "5",
			"Type": "String"
		},
		"SQLServiceAccountPasswordKey": {
			"Description": "SSM Parameter Store Key of Password for the SQL Service account. Must be at least 8 characters containing letters, numbers and symbols",
			"Type": "String"
		},
		"Volume1Size": {
			"Default": "500",
			"Description": "Volume size for the SQL Data drive, in GiB",
			"Type": "String"
		},
		"Volume1Type": {
			"AllowedValues": [
				"gp2",
				"io1",
				"st1",
				"sc1",
				"io2",
				"gp3"
			],
			"Default": "gp2",
			"Description": "Volume type for the SQL Data drive",
			"Type": "String"
		},
		"Volume1DeviceName": {
			"Default": "/dev/xvdc",
			"Description": "Device Name of Volume1",
			"Type": "String"
		},
		"Volume1DriveLetter": {
			"Default": "D",
			"Description": "Drive Letter of Volume1",
			"Type": "String"
		},
		"Volume1DriveType": {
			"Default": "logs",
			"Description": "Drive Type of Volume1",
			"Type": "String"
		},
		"Volume2Size": {
			"Default": "500",
			"Description": "Volume size for the SQL Logs drive, in GiB",
			"Type": "String"
		},
		"Volume2Type": {
			"AllowedValues": [
				"gp2",
				"io1",
				"st1",
				"sc1",
				"io2",
				"gp3"
			],
			"Default": "gp2",
			"Description": "Volume type for the SQL Logs drive",
			"Type": "String"
		},
		"Volume2DeviceName": {
			"Default": "/dev/xvdd",
			"Description": "Device Name of Volume2",
			"Type": "String"
		},
		"Volume2DriveLetter": {
			"Default": "E",
			"Description": "Drive Letter of Volume2",
			"Type": "String"
		},
		"Volume2DriveType": {
			"Default": "data",
			"Description": "Drive Type of Volume2",
			"Type": "String"
		},
		"Volume3Size": {
			"Default": "500",
			"Description": "Volume size for the SQL TempDB drive, in GiB",
			"Type": "String"
		},
		"Volume3Type": {
			"AllowedValues": [
				"gp2",
				"io1",
				"st1",
				"sc1",
				"io2",
				"gp3"
			],
			"Default": "gp2",
			"Description": "Volume type for the SQL TempDB drive",
			"Type": "String"
		},
		"Volume3DeviceName": {
			"Default": "/dev/xvde",
			"Description": "Device Name of Volume3",
			"Type": "String"
		},
		"Volume3DriveLetter": {
			"Default": "F",
			"Description": "Drive Letter of Volume3",
			"Type": "String"
		},
		"Volume3DriveType": {
			"Default": "backup",
			"Description": "Drive Type of Volume3",
			"Type": "String"
		},
		"VolumeIopsValues": {
			"Default": "5000,5000,5000,5000",
			"Description": "Default provisioned IOPs for the Root Drive, SQL Data, Logs and TempDb (for io1 volumes)",
			"Type": "String"
		},
		"RootDriveType": {
			"Default": "gp2",
			"Description": "Volume Type of Root Drive",
			"Type": "String"
		},
		"RootDriveSize": {
			"Default": "100",
			"Description": "Volume Size of Root Drive",
			"Type": "String"
		},
		"SQLNodeTagPairs": {
			"Type": "CommaDelimitedList",
			"Description": "Tag Key and Value pairs of SQLNode",
			"Default": ""
		},
		"NumberOfSQLNodeTags": {
			"Default": "0",
			"AllowedValues": [
				"0",
				"1",
				"2",
				"3"
			],
			"Description": "Number of SQLNode tags",
			"Type": "String"
		},
		"VolumeTagPairs": {
			"Type": "CommaDelimitedList",
			"Description": "String includes all valume tags key and value pairs",
			"Default": ""
		},
		"NumberOfVolumeTags": {
			"Default": "0",
			"AllowedValues": [
				"0",
				"1",
				"2",
				"3"
			],
			"Description": "Number of Volume tags",
			"Type": "String"
		},
		"GeneralTagPairString": {
			"Default": "",
			"Description": "String includes all general tags key and value pairs",
			"Type": "String"
		},
		"VPCID": {
			"Description": "ID of the VPC (e.g., vpc-0343606e)",
			"Type": "AWS::EC2::VPC::Id"
		},
		"NodeInstanceType": {
			"Default": "r5.2xlarge",
			"Description": "Amazon EC2 instance type for the SQL Node",
			"Type": "String"
		},
		"NodeNetBIOSName": {
			"Type": "String",
			"Description": "NetBIOS name of the SQL Node (up to 15 characters)",
			"Default": "SQLNode"
		},
		"VersionsRange": {
			"Type": "CommaDelimitedList",
			"Description": "Range of OS version range followed by sql versions",
			"Default": "6.3,10.0,12,16"
		},
		"DHIDS": {
			"Default": "",
			"Description": "Dedicated Host Ids to deploy instance",
			"Type": "String"
		},
		"HRGID": {
			"Default": "",
			"Description": "Host Resource Group Id in which to deploy instance",
			"Type": "String"
		},
		"TempDBonInstanceStore": {
			"Default": "false",
			"Description": "Place TempDB on local instance store",
			"Type": "String"
		}
	},
	"Conditions": {
		"isGovRegion": {
			"Fn::Or": [{
					"Fn::Equals": [
						"us-gov-west-1",
						{
							"Ref": "AWS::Region"
						}
					]
				},
				{
					"Fn::Equals": [
						"us-gov-east-1",
						{
							"Ref": "AWS::Region"
						}
					]
				}
			]
		},
		"1SQLNodeTags": {
			"Fn::Or": [{
					"Fn::Equals": [{
							"Ref": "NumberOfSQLNodeTags"
						},
						"1"
					]
				},
				{
					"Condition": "2SQLNodeTags"
				}
			]
		},
		"2SQLNodeTags": {
			"Fn::Or": [{
					"Fn::Equals": [{
							"Ref": "NumberOfSQLNodeTags"
						},
						"2"
					]
				},
				{
					"Condition": "3SQLNodeTags"
				}
			]
		},
		"3SQLNodeTags": {
			"Fn::Equals": [{
					"Ref": "NumberOfSQLNodeTags"
				},
				"3"
			]
		},
		"1VolumeTags": {
			"Fn::Or": [{
					"Fn::Equals": [{
							"Ref": "NumberOfVolumeTags"
						},
						"1"
					]
				},
				{
					"Condition": "2VolumeTags"
				}
			]
		},
		"2VolumeTags": {
			"Fn::Or": [{
					"Fn::Equals": [{
							"Ref": "NumberOfVolumeTags"
						},
						"2"
					]
				},
				{
					"Condition": "3VolumeTags"
				}
			]
		},
		"3VolumeTags": {
			"Fn::Equals": [{
					"Ref": "NumberOfVolumeTags"
				},
				"3"
			]
		},
		"LogFeatureEnabled": {
			"Fn::Equals": [{
					"Ref": "EnableLogFeature"
				},
				"true"
			]
		},
		"NewAD": {
			"Fn::Equals": [{
					"Ref": "CreateNewAD"
				},
				"true"
			]
		},
		"CreateVolume1": {
			"Fn::Not": [{
				"Fn::Equals": [{
						"Ref": "Volume1DeviceName"
					},
					"N/A"
				]
			}]
		},
		"CreateVolume2": {
			"Fn::Not": [{
				"Fn::Equals": [{
						"Ref": "Volume2DeviceName"
					},
					"N/A"
				]
			}]
		},
		"CreateVolume3": {
			"Fn::Not": [{
				"Fn::Equals": [{
						"Ref": "Volume3DeviceName"
					},
					"N/A"
				]
			}]
		},
		"RootDriveIsIo2": {
			"Fn::Equals": [{
					"Ref": "RootDriveType"
				},
				"io2"
			]
		},
		"Vol1IsIo2": {
			"Fn::Equals": [{
					"Ref": "Volume1Type"
				},
				"io2"
			]
		},
		"Vol2IsIo2": {
			"Fn::Equals": [{
					"Ref": "Volume2Type"
				},
				"io2"
			]
		},
		"Vol3IsIo2": {
			"Fn::Equals": [{
					"Ref": "Volume3Type"
				},
				"io2"
			]
		},
		"RootDriveIsIo1": {
			"Fn::Or": [{
					"Fn::Equals": [{
							"Ref": "RootDriveType"
						},
						"io1"
					]
				},
				{
					"Condition": "RootDriveIsIo2"
				}
			]
		},
		"Vol1IsIo1": {
			"Fn::Or": [{
					"Fn::Equals": [{
							"Ref": "Volume1Type"
						},
						"io1"
					]
				},
				{
					"Condition": "Vol1IsIo2"
				}
			]
		},
		"Vol2IsIo1": {
			"Fn::Or": [{
					"Fn::Equals": [{
							"Ref": "Volume2Type"
						},
						"io1"
					]
				},
				{
					"Condition": "Vol2IsIo2"
				}
			]
		},
		"Vol3IsIo1": {
			"Fn::Or": [{
					"Fn::Equals": [{
							"Ref": "Volume3Type"
						},
						"io1"
					]
				},
				{
					"Condition": "Vol3IsIo2"
				}
			]
		},
		"NewRole": {
			"Fn::Equals": [{
					"Ref": "Ec2RoleName"
				},
				""
			]
		},
		"isDH": {
			"Fn::Not": [{
				"Fn::Equals": [{
						"Ref": "DHIDS"
					},
					""
				]
			}]
		},
		"isHRG": {
			"Fn::Not": [{
				"Fn::Equals": [{
						"Ref": "HRGID"
					},
					""
				]
			}]
		},
		"TempDB": {
			"Fn::Equals": [{
					"Ref": "TempDBonInstanceStore"
				},
				"true"
			]
		}
	},
	"Rules": {
		"SubnetsInVPC": {
			"Assertions": [{
				"Assert": {
					"Fn::EachMemberIn": [{
							"Fn::ValueOfAll": [
								"AWS::EC2::Subnet::Id",
								"VpcId"
							]
						},
						{
							"Fn::RefAll": "AWS::EC2::VPC::Id"
						}
					]
				},
				"AssertDescription": "All subnets must in the VPC"
			}]
		}
	},
	"Resources": {
		"InstanceRole": {
			"Condition": "NewRole",
			"Type": "AWS::IAM::Role",
			"Properties": {
				"ManagedPolicyArns": [{
					"Fn::Join": [
						"",
						[
							"arn:",
							{
								"Ref": "AWS::Partition"
							},
							":iam::aws:policy/service-role/AmazonEC2RoleforSSM"
						]
					]
				}],
				"Policies": [{
					"PolicyName": "LaunchWizardPolicyForEC2",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
								"Action": [
									"logs:Create*",
									"logs:PutLogEvents",
									"s3:GetObject"
								],
								"Resource": [{
										"Fn::Join": [
											"",
											[
												"arn:",
												{
													"Ref": "AWS::Partition"
												},
												":logs:*:*:*"
											]
										]
									},
									{
										"Fn::Join": [
											"",
											[
												"arn:",
												{
													"Ref": "AWS::Partition"
												},
												":s3:::launchwizard*/*"
											]
										]
									}
								],
								"Effect": "Allow"
							},
							{
								"Action": [
									"ec2:AttachVolume",
									"ec2:ModifyVolume",
									"ec2:DescribeVolumes",
									"ec2:DescribeInstances",
									"ec2:CreateVolume"
								],
								"Resource": "*",
								"Condition": {
									"ForAllValues:StringLike": {
										"aws:TagKeys": "LaunchWizardResourceGroupID"
									}
								},
								"Effect": "Allow"
							},
							{
								"Action": [
									"ec2:AssociateAddress",
									"ec2:DescribeAddresses",
									"ec2:CreateTags"
								],
								"Resource": "*",
								"Effect": "Allow"
							}
						]
					}
				}],
				"Path": "/",
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Action": [
							"sts:AssumeRole"
						],
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Effect": "Allow"
					}],
					"Version": "2012-10-17"
				}
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": {
					"Fn::If": [
						"NewRole",
						[{
							"Ref": "InstanceRole"
						}],
						[{
							"Ref": "Ec2RoleName"
						}]
					]
				},
				"Path": "/"
			}
		},
		"SQLNodeWaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "SQLNode",
			"Properties": {
				"Handle": {
					"Ref": "SQLNodeWaitHandle"
				},
				"Timeout": "14400"
			}
		},
		"SQLNodeWaitHandle": {
			"Type": "AWS::CloudFormation::WaitConditionHandle"
		},
		"SQLNetworkInterface": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"SecondaryPrivateIpAddressCount": 1,
				"SubnetId": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								",",
								{
									"Ref": "PrivateSubnetAssignment"
								}
							]
						}
					]
				},
				"GroupSet": [{
						"Ref": "DomainMemberSGID"
					},
					{
						"Ref": "ClientSecurityGroup"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Ref": "NodeNetBIOSName"
					}
				}]
			}
		},
		"DisableIMDSv1": {
			"Type": "AWS::EC2::LaunchTemplate",
			"Properties": {
				"LaunchTemplateData": {
					"MetadataOptions": {
						"HttpEndpoint": "enabled",
						"HttpTokens": "required"
					}
				}
			}
		},
		"SQLNode": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Authentication": {
					"S3AccessCreds": {
						"type": "S3",
						"roleName": {
							"Fn::If": [
								"NewRole",
								{
									"Ref": "InstanceRole"
								},
								{
									"Ref": "Ec2RoleName"
								}
							]
						},
						"buckets": [{
							"Ref": "AssetsBucketName"
						}]
					}
				},
				"AWS::CloudFormation::Init": {
					"configSets": {
						"config": [
							"FetchResources",
							"ScriptSignatureVerification",
							"ConfigureCWLogs",
							"LaunchWizardCFNSetup",
							"Validate",
							"PreConfigDSC",
							"VolumesSetup",
							"Prep",
							"SQLIncludedConfigure",
							"Configure",
							"Cleanup",
							"Finalize"
						]
					},
					"FetchResources": {
						"files": {
							"C:\\cfn\\scripts\\Verify-Signature.ps1": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/scripts/Verify-Signature.ps1"
								}
							},
							"C:\\cfn\\scripts\\Unzip-Archive.ps1": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/scripts/Unzip-Archive.ps1"
								}
							},
							"C:\\cfn\\scripts\\common.zip": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/scripts/common.zip"
								}
							},
							"C:\\cfn\\scripts\\common.zip.sig": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/scripts/common.zip.sig"
								}
							},
							"C:\\cfn\\scripts\\sqlha.zip": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/scripts/sqlha.zip"
								}
							},
							"C:\\cfn\\scripts\\sqlha.zip.sig": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/scripts/sqlha.zip.sig"
								}
							},
							"C:\\cfn\\DSC.zip": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/DSC.zip"
								}
							},
							"C:\\cfn\\DSC.zip.sig": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/DSC.zip.sig"
								}
							},
							"C:\\cfn\\modules\\AWSLaunchWizardForCFN.zip": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/modules/AWSLaunchWizardForCFN.zip"
								}
							},
							"C:\\cfn\\modules\\AWSLaunchWizardForCFN.zip.sig": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/modules/AWSLaunchWizardForCFN.zip.sig"
								}
							},
							"C:\\cfn\\modules\\AWSLaunchWizardForSSM.zip": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/modules/AWSLaunchWizardForSSM.zip"
								}
							},
							"C:\\cfn\\modules\\AWSLaunchWizardForSSM.zip.sig": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/modules/AWSLaunchWizardForSSM.zip.sig"
								}
							},
							"C:\\cfn\\modules\\AWSLaunchWizardSQLUtility.zip": {
                                "source": {
                                    "Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/modules/AWSLaunchWizardSQLUtility.zip"
                                }
                            },
                            "C:\\cfn\\modules\\AWSLaunchWizardSQLUtility.zip.sig": {
                                "source": {
                                    "Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/modules/AWSLaunchWizardSQLUtility.zip.sig"
                                }
                            },
							"C:\\cfn\\modules\\AmznFailoverCluster.zip": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/modules/AmznFailoverCluster.zip"
								}
							},
							"C:\\cfn\\modules\\AmznFailoverCluster.zip.sig": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/modules/AmznFailoverCluster.zip.sig"
								}
							},
							"C:\\cfn\\Installer\\WMF51.zip": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/Installer/WMF51.zip"
								}
							},
							"C:\\cfn\\Installer\\WMF51.zip.sig": {
								"source": {
									"Fn::Sub": "https://${AssetsBucketName}.${AssetsS3RegionCode}.${AWS::URLSuffix}/${AssetsS3KeyPrefix}sql/Installer/WMF51.zip.sig"
								}
							}
						}
					},
					"ScriptSignatureVerification": {
						"commands": {
							"a-verify-common-signature": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\cfn\\scripts\\Verify-Signature.ps1 -FilePath C:\\cfn\\scripts\\common.zip -SignatureFilePath C:\\cfn\\scripts\\common.zip.sig",
								"waitAfterCompletion": "0"
							},
							"b-unpack-common-scripts": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\scripts\\common.zip -Destination C:\\cfn\\scripts",
								"waitAfterCompletion": "0"
							},
							"c-verify-sqlha-signature": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\cfn\\scripts\\Verify-Signature.ps1 -FilePath C:\\cfn\\scripts\\sqlha.zip -SignatureFilePath C:\\cfn\\scripts\\sqlha.zip.sig",
								"waitAfterCompletion": "0"
							},
							"d-unpack-sqlha-scripts": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\scripts\\sqlha.zip -Destination C:\\cfn\\scripts",
								"waitAfterCompletion": "0"
							},
							"e-verify-WMF51-signature": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\cfn\\scripts\\Verify-Signature.ps1 -FilePath C:\\cfn\\Installer\\WMF51.zip -SignatureFilePath C:\\cfn\\Installer\\WMF51.zip.sig",
								"waitAfterCompletion": "0"
							},
							"f-unpack-WMF51-scripts": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\Installer\\WMF51.zip -Destination C:\\cfn\\Installer",
								"waitAfterCompletion": "0"
							},
							"g-verify-cfnmodule-signature": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\cfn\\scripts\\Verify-Signature.ps1 -FilePath C:\\cfn\\modules\\AWSLaunchWizardForCFN.zip -SignatureFilePath C:\\cfn\\modules\\AWSLaunchWizardForCFN.zip.sig",
								"waitAfterCompletion": "0"
							},
							"h-verify-ssmmodule-signature": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\cfn\\scripts\\Verify-Signature.ps1 -FilePath C:\\cfn\\modules\\AWSLaunchWizardForSSM.zip -SignatureFilePath C:\\cfn\\modules\\AWSLaunchWizardForSSM.zip.sig",
								"waitAfterCompletion": "0"
							},
							"i-verify-sqlutility-signature": {
                                "command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\cfn\\scripts\\Verify-Signature.ps1 -FilePath C:\\cfn\\modules\\AWSLaunchWizardSQLUtility.zip -SignatureFilePath C:\\cfn\\modules\\AWSLaunchWizardSQLUtility.zip.sig",
								"waitAfterCompletion": "0"
                            },
							"j-verify-failovercluster-signature": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\cfn\\scripts\\Verify-Signature.ps1 -FilePath C:\\cfn\\modules\\AmznFailoverCluster.zip -SignatureFilePath C:\\cfn\\modules\\AmznFailoverCluster.zip.sig",
								"waitAfterCompletion": "0"
							},
							"k-verify-DSC-signature": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\cfn\\scripts\\Verify-Signature.ps1 -FilePath C:\\cfn\\DSC.zip -SignatureFilePath C:\\cfn\\DSC.zip.sig",
								"waitAfterCompletion": "0"
							},
							"l-unpack-DSC-scripts": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\DSC.zip -Destination C:\\cfn",
								"waitAfterCompletion": "0"
							}
						}
					},
					"ConfigureCWLogs": {
						"files": {
							"C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json": {
								"content": {
									"Fn::If": [
										"LogFeatureEnabled",
										{
											"Fn::Join": [
												"",
												[
													"{",
													"  \"IsEnabled\" : true,",
													"  \"EngineConfiguration\" : {",
													"    \"PollInterval\" : \"00:00:05\",",
													"    \"Components\" : [{",
													"      \"Id\" : \"ApplicationEventLog\",",
													"      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
													"      \"Parameters\" : {",
													"        \"LogName\" : \"Application\",",
													"        \"Levels\" : \"7\"",
													"      }",
													"    },",
													"    {",
													"      \"Id\": \"CfnInitLog\",",
													"      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
													"      \"Parameters\": {",
													"        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
													"        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
													"        \"Encoding\": \"ASCII\",",
													"        \"Filter\": \"cfn-init.log\",",
													"        \"CultureName\": \"en-US\",",
													"        \"TimeZoneKind\": \"Local\"",
													"      }",
													"    },",
													"    {",
													"      \"Id\": \"CloudWatchCfnInitLog\",",
													"      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
													"      \"Parameters\": {",
													"        \"AccessKey\": \"\",",
													"        \"SecretKey\": \"\",",
													{
														"Fn::Sub": "        \"Region\": \"${AWS::Region}\","
													},
													{
														"Fn::Sub": "        \"LogGroup\": \"${LogGroupName}\","
													},
													"        \"LogStream\": \"{instance_id}\"",
													"      }",
													"    },",
													"    {",
													"      \"Id\" : \"CloudWatch\",",
													"      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
													"      \"Parameters\" : {",
													"        \"AccessKey\" : \"\",",
													"        \"SecretKey\" : \"\",",
													{
														"Fn::Sub": "        \"Region\": \"${AWS::Region}\","
													},
													"        \"NameSpace\" : \"Windows/Default\"",
													"      }",
													"    }],",
													"    \"Flows\": {",
													"      \"Flows\": [",
													"        \"CfnInitLog,CloudWatchCfnInitLog\"",
													"      ]",
													"    }",
													"  }",
													"}"
												]
											]
										},
										" { \"IsEnabled\" : false}"
									]
								}
							}
						},
						"commands": {
							"a-reinstallSSM": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Reinstall-SSMAgent.ps1 -Handler '",
											{
												"Fn::Base64": {
													"Ref": "SQLNodeWaitHandle"
												}
											},
											"' -stockAMI $",
											{
												"Ref": "SQLLicenseProvided"
											}
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"LaunchWizardCFNSetup": {
						"commands": {
							"a-install-wmf-framework": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\common\\Install-WMFFramework.ps1",
								"waitAfterCompletion": "forever"
							},
							"b-add-powershell-module-path": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\common\\Check-PSModulePath.ps1 -PathToCheck 'C:\\Program Files\\WindowsPowerShell\\Modules'",
								"waitAfterCompletion": "0"
							},
							"c-unpack-launchwizard-module": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\modules\\AWSLaunchWizardForCFN.zip -Destination 'C:\\Program Files\\WindowsPowerShell\\Modules\\'",
								"waitAfterCompletion": "0"
							},
							"d-unpack-launchwizard-module": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\modules\\AWSLaunchWizardForSSM.zip -Destination 'C:\\Program Files\\WindowsPowerShell\\Modules\\'",
								"waitAfterCompletion": "0"
							},
							"e-unpack-launchwizard-module": {
								"command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\modules\\AWSLaunchWizardSQLUtility.zip -Destination 'C:\\Program Files\\WindowsPowerShell\\Modules\\'",
								"waitAfterCompletion": "0"
							},
							"f-init-launchwizard-module": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"",
											"New-AWSLaunchWizardWaitHandle -Handle '",
											{
												"Ref": "SQLNodeWaitHandle"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"Validate": {
						"commands": {
							"a-validate-os-and-sql-server-version": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Validate-OSAndSQLVersions.ps1 -MinimumOSVersion '",
											{
												"Fn::Select": [
													"0",
													{
														"Ref": "VersionsRange"
													}
												]
											},
											"' -MinimumSQLVersion '",
											{
												"Fn::Select": [
													"2",
													{
														"Ref": "VersionsRange"
													}
												]
											},
											"' -MaximumOSVersion '",
											{
												"Fn::Select": [
													"1",
													{
														"Ref": "VersionsRange"
													}
												]
											},
											"' -MaximumSQLVersion '",
											{
												"Fn::Select": [
													"3",
													{
														"Ref": "VersionsRange"
													}
												]
											},
											"' -stockAMI $",
											{
												"Ref": "SQLLicenseProvided"
											},
											"\""
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"PreConfigDSC": {
						"commands": {
							"a-run-pre-config-dsc": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\DSC\\PreConfigDSC.ps1 -VPCCIDR '",
											{
												"Ref": "VPCCIDR"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"b-reboot": {
								"command": "powershell.exe -Command \"C:\\cfn\\scripts\\common\\Restart-Computer.ps1\"",
								"waitAfterCompletion": "forever"
							}
						}
					},
					"VolumesSetup": {
						"commands": {
							"a-initialize-disks": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\InitializeDisks.ps1",
											" -DeviceNames ",
											{
												"Fn::Sub": "${Volume1DeviceName},${Volume2DeviceName},${Volume3DeviceName}"
											},
											"\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"b-resize-volumes": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Resize-Volumes.ps1",
											" -VolumeSizes ",
											{
												"Fn::Sub": "${Volume1Size},${Volume2Size},${Volume3Size}"
											},
											" -DriveLetters ",
											{
												"Fn::Sub": "${Volume1DriveLetter},${Volume2DriveLetter},${Volume3DriveLetter}"
											},
											" -DeviceNames ",
											{
												"Fn::Sub": "${Volume1DeviceName},${Volume2DeviceName},${Volume3DeviceName}"
											},
											"\""
										]
									]
								},
								"waitAfterCompletion": "forever"
							},
							"c-extend-disks": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Extend-Disks.ps1",
											" -DriveLetters ",
											{
												"Fn::Sub": "${Volume1DriveLetter},${Volume2DriveLetter},${Volume3DriveLetter}"
											},
											"\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"d-tag-root-volume": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Tag-RootVolume.ps1 -UniqueID '",
											{
												"Ref": "UniqueID"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"Prep": {
						"commands": {
							"a-rename-computer": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Rename-Computer.ps1 -Restart -NewName '",
											{
												"Ref": "NodeNetBIOSName"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "forever"
							},
							"b-update-DNS": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Update-DNSServers.ps1 -ADServersPrivateIP '",
											{
												"Ref": "ADServersPrivateIP"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"c-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -Command \"C:\\cfn\\scripts\\common\\Join-Domain.ps1 -AdminSecret '",
                                            {
                                                "Ref": "DomainAdminPasswordKey"
                                            },
                                            "' -DomainAdminUser '",
                                            {
                                                "Ref": "DomainAdminUser"
                                            },
                                            "' -DomainDNSName '",
                                            {
                                                "Ref": "DomainDNSName"
                                            },
                                            "'\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            },
							"d-enable-credssp": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command \"C:\\cfn\\scripts\\common\\Enable-CredSSP.ps1\"",
								"waitAfterCompletion": "0"
							},
							"e-add-domadmin-user-to-group": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe ",
											"-ExecutionPolicy RemoteSigned ",
											"-Command \"",
											"C:\\cfn\\scripts\\common\\AddUserToGroup.ps1 -UserName '",
											{
												"Ref": "DomainAdminUser"
											},
											"' -DomainDNSName '",
											{
												"Ref": "DomainDNSName"
											},
											"' -GroupName 'Administrators'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"f-create-sql-account": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Create-ADServiceAccount.ps1 -DomainDNSName '",
											{
												"Ref": "DomainDNSName"
											},
											"' -DomainAdminUser '",
											{
												"Ref": "DomainAdminUser"
											},
											"' -DomainAdminSecretKey '",
											{
												"Ref": "DomainAdminPasswordKey"
											},
											"' -ServiceAccountUser '",
											{
												"Ref": "SQLServiceAccount"
											},
											"' -ServiceAccountSecretKey '",
											{
												"Ref": "SQLServiceAccountPasswordKey"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"g-wait-for-ad-replication": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe ",
											"-ExecutionPolicy RemoteSigned ",
											"-Command \"",
											"C:\\cfn\\scripts\\common\\Test-ADUser.ps1 -UserName '",
											{
												"Ref": "SQLServiceAccount"
											},
											"' -Wait -TimeoutMinutes 60 -IntervalMinutes 1\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"h-add-sqlservice-user-to-group": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe ",
											"-ExecutionPolicy RemoteSigned ",
											"-Command \"",
											"C:\\cfn\\scripts\\common\\AddUserToGroup.ps1 -UserName '",
											{
												"Ref": "SQLServiceAccount"
											},
											"' -DomainDNSName '",
											{
												"Ref": "DomainDNSName"
											},
											"' -GroupName 'Administrators'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"i-update-dnssuffixlist": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Update-DNSSuffixSearchList.ps1 -DomainDNSName '",
											{
												"Ref": "DomainDNSName"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"SQLIncludedConfigure": {
						"commands": {
							"a-add-buildtin-admins-to-sysadmin": {
								"command": "powershell.exe -Command \"C:\\cfn\\DSC\\PostConfigDSC.ps1\"",
								"waitAfterCompletion": "0"
							},
							"b-initialize-tempdb": {
								"Fn::If": [
									"TempDB",
									{
										"command": "powershell.exe -Command \"C:\\cfn\\scripts\\sqlha\\Set-SQLTempdb.ps1\"",
										"waitAfterCompletion": "0"
									},
									{
										"Ref": "AWS::NoValue"
									}
								]
							},
							"c-initialize-tempdb": {
								"Fn::If": [
									"TempDB",
									{
										"command": "powershell.exe -Command \"C:\\cfn\\scripts\\sqlha\\create-tempdbtask.ps1\"",
										"waitAfterCompletion": "0"
									},
									{
										"Ref": "AWS::NoValue"
									}
								]
							},
							"d-configure-sql": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\sqlha\\Reconfigure-SQL.ps1 -DomainAdminUser '",
											{
												"Ref": "DomainAdminUser"
											},
											"' -DomainAdminPasswordKey '",
											{
												"Ref": "DomainAdminPasswordKey"
											},
											"' -SQLServiceAccount '",
											{
												"Ref": "SQLServiceAccount"
											},
											"' -SQLServiceAccountPasswordKey '",
											{
												"Ref": "SQLServiceAccountPasswordKey"
											},
											"' -NetBIOSName '",
											{
												"Ref": "NodeNetBIOSName"
											},
											"' -DriveLetters ",
											{
												"Fn::Sub": "${Volume1DriveLetter},${Volume2DriveLetter},${Volume3DriveLetter}"
											},
											" -DriveTypes ",
											{
												"Fn::Sub": "${Volume1DriveType},${Volume2DriveType},${Volume3DriveType}"
											},
											" -TempDBonInstanceStore ",
											{
												"Ref": "TempDBonInstanceStore"
											},
											"\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"e-configure-tempdb": {
								"Fn::If": [
									"TempDB",
									{
										"command": {
											"Fn::Join": [
												"",
												[
													"powershell.exe -Command \"C:\\cfn\\scripts\\sqlha\\Reconfigure-TempDB.ps1 -DomainAdminUser '",
													{
														"Ref": "DomainAdminUser"
													},
													"' -DomainAdminPasswordKey '",
													{
														"Ref": "DomainAdminPasswordKey"
													},
													"' -NetBIOSName '",
													{
														"Ref": "NodeNetBIOSName"
													},
													"' -DriveLetters ",
													{
														"Fn::Sub": "${Volume1DriveLetter},${Volume2DriveLetter},${Volume3DriveLetter}"
													},
													" -DriveTypes ",
													{
														"Fn::Sub": "${Volume1DriveType},${Volume2DriveType},${Volume3DriveType}"
													},
													"\""
												]
											]
										},
										"waitAfterCompletion": "0"
									},
									{
										"Ref": "AWS::NoValue"
									}
								]
							}
						}
					},
					"Configure": {
						"commands": {
							"a-set-maxdop": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\SetMaxDOP.ps1 -DomainAdminUser '",
											{
												"Ref": "DomainAdminUser"
											},
											"' -DomainAdminPasswordKey '",
											{
												"Ref": "DomainAdminPasswordKey"
											},
											"' -NetBIOSName '",
											{
												"Ref": "NodeNetBIOSName"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"b-set-sqlinstancename": {
								"command": {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command \"C:\\cfn\\scripts\\common\\Set-SQLInstanceName.ps1 -DomainAdminUser '",
											{
												"Ref": "DomainAdminUser"
											},
											"' -DomainAdminPasswordKey '",
											{
												"Ref": "DomainAdminPasswordKey"
											},
											"' -NetBIOSName '",
											{
												"Ref": "NodeNetBIOSName"
											},
											"'\""
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"Cleanup": {
						"commands": {
							"a-disable-credssp": {
								"command": "powershell.exe -ExecutionPolicy RemoteSigned -Command \"C:\\cfn\\scripts\\common\\Disable-CredSSP.ps1\"",
								"waitAfterCompletion": "0"
							},
							"b-remove-MSSQLSvcSPN": {
								"command": {
									"Fn::Join": [
										"",
										[
											"SetSPN -d MSSQLSvc/",
											{
												"Ref": "NodeNetBIOSName"
											},
											".",
											{
												"Ref": "DomainDNSName"
											},
											" ",
											{
												"Ref": "DomainDNSName"
											},
											"\\",
											{
												"Ref": "NodeNetBIOSName"
											}
										]
									]
								},
								"waitAfterCompletion": "0"
							},
							"c-remove-MSSQLSvcPortSPN": {
								"command": {
									"Fn::Join": [
										"",
										[
											"SetSPN -d MSSQLSvc/",
											{
												"Ref": "NodeNetBIOSName"
											},
											".",
											{
												"Ref": "DomainDNSName"
											},
											":1433 ",
											{
												"Ref": "DomainDNSName"
											},
											"\\",
											{
												"Ref": "NodeNetBIOSName"
											}
										]
									]
								},
								"waitAfterCompletion": "0"
							}
						}
					},
					"Finalize": {
						"commands": {
							"a-add-windows-features": {
								"command": "powershell.exe -Command \"C:\\cfn\\scripts\\common\\Add-Features.ps1\"",
								"waitAfterCompletion": "0"
							},
							"b-cleanup-scripts": {
								"command": "powershell -Command \"Get-Item C:\\cfn\\scripts | Remove-Item -Recurse -Force\"",
								"waitAfterCompletion": "0"
							},
							"c-cleanup-DSC": {
								"command": "powershell -Command \"(Get-Item C:\\cfn\\DSC*)|%{Remove-Item $_ -Force -Recurse}\"",
								"waitAfterCompletion": "0"
							},
							"d-signal-success": {
								"command": "powershell -Command \"Write-AWSLaunchWizardStatus\"",
								"waitAfterCompletion": "0"
							}
						}
					}
				}
			},
			"Properties": {
				"HostId": {
					"Fn::If": [
						"isDH",
						{
							"Fn::Select": [
								0,
								{
									"Fn::Split": [
										",",
										{
											"Ref": "DHIDS"
										}
									]
								}
							]
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"HostResourceGroupArn": {
					"Fn::If": [
						"isHRG",
						{
							"Ref": "HRGID"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"Affinity": {
					"Fn::If": [
						"isDH",
						"host",
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"Tenancy": {
					"Fn::If": [
						"isDH",
						"host",
						{
							"Fn::If": [
								"isHRG",
								{
									"Ref": "AWS::NoValue"
								},
								"default"
							]
						}
					]
				},
				"ImageId": {
					"Ref": "SQLAMIID"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"InstanceType": {
					"Ref": "NodeInstanceType"
				},
				"Volumes": [{
						"Fn::If": [
							"CreateVolume1",
							{
								"VolumeId": {
									"Ref": "SQLNodeVolume1"
								},
								"Device": {
									"Ref": "Volume1DeviceName"
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"CreateVolume2",
							{
								"VolumeId": {
									"Ref": "SQLNodeVolume2"
								},
								"Device": {
									"Ref": "Volume2DeviceName"
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"CreateVolume3",
							{
								"VolumeId": {
									"Ref": "SQLNodeVolume3"
								},
								"Device": {
									"Ref": "Volume3DeviceName"
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					}
				],
				"EbsOptimized": "true",
				"LaunchTemplate": {
					"LaunchTemplateId": {
						"Ref": "DisableIMDSv1"
					},
					"Version": {
						"Fn::GetAtt": [
							"DisableIMDSv1",
							"DefaultVersionNumber"
						]
					}
				},
				"NetworkInterfaces": [{
					"NetworkInterfaceId": {
						"Ref": "SQLNetworkInterface"
					},
					"DeviceIndex": "0"
				}],
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Ref": "NodeNetBIOSName"
						}
					},
					{
						"Fn::If": [
							"1SQLNodeTags",
							{
								"Key": {
									"Fn::Select": [
										"0",
										{
											"Ref": "SQLNodeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"1",
										{
											"Ref": "SQLNodeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"2SQLNodeTags",
							{
								"Key": {
									"Fn::Select": [
										"2",
										{
											"Ref": "SQLNodeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"3",
										{
											"Ref": "SQLNodeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"3SQLNodeTags",
							{
								"Key": {
									"Fn::Select": [
										"4",
										{
											"Ref": "SQLNodeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"5",
										{
											"Ref": "SQLNodeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					}
				],
				"BlockDeviceMappings": [{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeSize": {
								"Ref": "RootDriveSize"
							},
							"VolumeType": {
								"Ref": "RootDriveType"
							},
							"Iops": {
								"Fn::If": [
									"RootDriveIsIo1",
									{
										"Fn::Select": [
											0,
											{
												"Fn::Split": [
													",",
													{
														"Ref": "VolumeIopsValues"
													}
												]
											}
										]
									},
									{
										"Ref": "AWS::NoValue"
									}
								]
							}
						}
					},
					{
						"DeviceName": "/dev/xvdca",
						"VirtualName": "ephemeral0"
					}
				],
				"KeyName": {
					"Ref": "KeyPairName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"<script>\n",
								"if \"",
								{
									"Ref": "SQLLicenseProvided"
								},
								"\" == \"false\" (",
								"(powershell -c \"Invoke-WebRequest -Uri 'https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-win64-latest.msi' -OutFile 'C:\\cfn-agent.msi'\")&&((wmic product where \"description='aws-cfn-bootstrap' \" uninstall)&(start /wait C:\\Windows\\system32\\msiexec /passive /qn /i C:\\cfn-agent.msi))||((wmic product get name| findstr /i /C:\"aws-cfn-bootstrap\")||(",
								"cfn-signal.exe -e 1 --reason=\"Failed to download CFN Agent msi and no CFN Agent installed on this instance.\"",
								{
									"Fn::Base64": {
										"Ref": "SQLNodeWaitHandle"
									}
								},
								")))",
								"</script>",
								"<powershell>",
								"cfn-init.exe -v -c config -s ",
								{
									"Ref": "AWS::StackId"
								},
								" -r SQLNode",
								" --region ",
								{
									"Ref": "AWS::Region"
								},
								"</powershell>"
							]
						]
					}
				}
			}
		},
		"SQLNodeVolume1": {
			"Type": "AWS::EC2::Volume",
			"Condition": "CreateVolume1",
			"Properties": {
				"Size": {
					"Ref": "Volume1Size"
				},
				"VolumeType": {
					"Ref": "Volume1Type"
				},
				"Iops": {
					"Fn::If": [
						"Vol1IsIo1",
						{
							"Fn::Select": [
								1,
								{
									"Fn::Split": [
										",",
										{
											"Ref": "VolumeIopsValues"
										}
									]
								}
							]
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"AvailabilityZone": {
					"Ref": "AvailabilityZone"
				},
				"Tags": [{
						"Fn::If": [
							"1VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"0",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"1",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"2VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"2",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"3",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"3VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"4",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"5",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					}
				]
			}
		},
		"SQLNodeVolume2": {
			"Type": "AWS::EC2::Volume",
			"Condition": "CreateVolume2",
			"Properties": {
				"Size": {
					"Ref": "Volume2Size"
				},
				"VolumeType": {
					"Ref": "Volume2Type"
				},
				"Iops": {
					"Fn::If": [
						"Vol2IsIo1",
						{
							"Fn::Select": [
								2,
								{
									"Fn::Split": [
										",",
										{
											"Ref": "VolumeIopsValues"
										}
									]
								}
							]
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"AvailabilityZone": {
					"Ref": "AvailabilityZone"
				},
				"Tags": [{
						"Fn::If": [
							"1VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"0",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"1",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"2VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"2",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"3",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"3VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"4",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"5",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					}
				]
			}
		},
		"SQLNodeVolume3": {
			"Type": "AWS::EC2::Volume",
			"Condition": "CreateVolume3",
			"Properties": {
				"Size": {
					"Ref": "Volume3Size"
				},
				"VolumeType": {
					"Ref": "Volume3Type"
				},
				"Iops": {
					"Fn::If": [
						"Vol3IsIo1",
						{
							"Fn::Select": [
								3,
								{
									"Fn::Split": [
										",",
										{
											"Ref": "VolumeIopsValues"
										}
									]
								}
							]
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"AvailabilityZone": {
					"Ref": "AvailabilityZone"
				},
				"Tags": [{
						"Fn::If": [
							"1VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"0",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"1",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"2VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"2",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"3",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					},
					{
						"Fn::If": [
							"3VolumeTags",
							{
								"Key": {
									"Fn::Select": [
										"4",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								},
								"Value": {
									"Fn::Select": [
										"5",
										{
											"Ref": "VolumeTagPairs"
										}
									]
								}
							},
							{
								"Ref": "AWS::NoValue"
							}
						]
					}
				]
			}
		},
		"SQLServerAccessSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "Allows access to SQL Servers"
			}
		},
		"ClientSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "SQL Client access ports",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "1433",
					"ToPort": "1433",
					"SourceSecurityGroupId": {
						"Ref": "SQLServerAccessSecurityGroup"
					}
				}]
			}
		}
	},
	"Outputs": {
		"DomainAdmin": {
			"Value": {
				"Fn::Join": [
					"",
					[{
							"Ref": "DomainDNSName"
						},
						"\\",
						{
							"Ref": "DomainAdminUser"
						}
					]
				]
			},
			"Description": "Domain administrator account"
		},
		"LocalAdmin": {
			"Value": "Administrator",
			"Description": "Please retrieve Administrator password of the instance"
		},
		"SQLNodeNetBIOSName": {
			"Value": {
				"Ref": "NodeNetBIOSName"
			},
			"Description": "NetBIOS name of the SQL Node"
		},
		"SQLServerAccessSecurityGroupID": {
			"Value": {
				"Ref": "SQLServerAccessSecurityGroup"
			},
			"Description": "Add instances that require access to SQL to this Security Group"
		}
	}
}
